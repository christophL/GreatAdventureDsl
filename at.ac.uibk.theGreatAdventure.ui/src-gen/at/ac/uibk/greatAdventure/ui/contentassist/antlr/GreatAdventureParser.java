/*
* generated by Xtext
*/
package at.ac.uibk.greatAdventure.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.ac.uibk.greatAdventure.services.GreatAdventureGrammarAccess;

public class GreatAdventureParser extends AbstractContentAssistParser {
	
	@Inject
	private GreatAdventureGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.ac.uibk.greatAdventure.ui.contentassist.antlr.internal.InternalGreatAdventureParser createParser() {
		at.ac.uibk.greatAdventure.ui.contentassist.antlr.internal.InternalGreatAdventureParser result = new at.ac.uibk.greatAdventure.ui.contentassist.antlr.internal.InternalGreatAdventureParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getItemDefinitionAccess().getAlternatives_0(), "rule__ItemDefinition__Alternatives_0");
					put(grammarAccess.getSceneDefinitionAccess().getAlternatives_4(), "rule__SceneDefinition__Alternatives_4");
					put(grammarAccess.getAdventureAccess().getGroup(), "rule__Adventure__Group__0");
					put(grammarAccess.getItemDefinitionAccess().getGroup(), "rule__ItemDefinition__Group__0");
					put(grammarAccess.getItemDefinitionAccess().getGroup_3_1(), "rule__ItemDefinition__Group_3_1__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup(), "rule__UseDefinition__Group__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup_4_0(), "rule__UseDefinition__Group_4_0__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup_4_0_2(), "rule__UseDefinition__Group_4_0_2__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup_4_1(), "rule__UseDefinition__Group_4_1__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup_4_1_2(), "rule__UseDefinition__Group_4_1_2__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup_4_2(), "rule__UseDefinition__Group_4_2__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup_4_2_2(), "rule__UseDefinition__Group_4_2_2__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup_4_3(), "rule__UseDefinition__Group_4_3__0");
					put(grammarAccess.getUseDefinitionAccess().getGroup_4_4(), "rule__UseDefinition__Group_4_4__0");
					put(grammarAccess.getSceneDefinitionAccess().getGroup(), "rule__SceneDefinition__Group__0");
					put(grammarAccess.getSceneDefinitionAccess().getGroup_4_0(), "rule__SceneDefinition__Group_4_0__0");
					put(grammarAccess.getItemPositionDefinitionAccess().getGroup(), "rule__ItemPositionDefinition__Group__0");
					put(grammarAccess.getItemPositionDefinitionAccess().getGroup_2(), "rule__ItemPositionDefinition__Group_2__0");
					put(grammarAccess.getStartDefinitionAccess().getGroup(), "rule__StartDefinition__Group__0");
					put(grammarAccess.getStartDefinitionAccess().getGroup_1_0(), "rule__StartDefinition__Group_1_0__0");
					put(grammarAccess.getStartDefinitionAccess().getGroup_1_1(), "rule__StartDefinition__Group_1_1__0");
					put(grammarAccess.getStartDefinitionAccess().getGroup_1_1_2(), "rule__StartDefinition__Group_1_1_2__0");
					put(grammarAccess.getAdventureAccess().getTitleAssignment_0(), "rule__Adventure__TitleAssignment_0");
					put(grammarAccess.getAdventureAccess().getItemDefAssignment_1_0(), "rule__Adventure__ItemDefAssignment_1_0");
					put(grammarAccess.getAdventureAccess().getSceneDefAssignment_1_1(), "rule__Adventure__SceneDefAssignment_1_1");
					put(grammarAccess.getAdventureAccess().getStartDefAssignment_2(), "rule__Adventure__StartDefAssignment_2");
					put(grammarAccess.getAdventureAccess().getItemDefAssignment_3_0(), "rule__Adventure__ItemDefAssignment_3_0");
					put(grammarAccess.getAdventureAccess().getSceneDefAssignment_3_1(), "rule__Adventure__SceneDefAssignment_3_1");
					put(grammarAccess.getAdventureTitleAccess().getNameAssignment(), "rule__AdventureTitle__NameAssignment");
					put(grammarAccess.getItemDefinitionAccess().getNameAssignment_1(), "rule__ItemDefinition__NameAssignment_1");
					put(grammarAccess.getItemDefinitionAccess().getPickupAssignment_3_0(), "rule__ItemDefinition__PickupAssignment_3_0");
					put(grammarAccess.getItemDefinitionAccess().getImgAssignment_3_1_1(), "rule__ItemDefinition__ImgAssignment_3_1_1");
					put(grammarAccess.getItemDefinitionAccess().getUsesAssignment_3_2(), "rule__ItemDefinition__UsesAssignment_3_2");
					put(grammarAccess.getUseDefinitionAccess().getNameAssignment_1(), "rule__UseDefinition__NameAssignment_1");
					put(grammarAccess.getUseDefinitionAccess().getReqsAssignment_4_0_1(), "rule__UseDefinition__ReqsAssignment_4_0_1");
					put(grammarAccess.getUseDefinitionAccess().getAltTextAssignment_4_0_2_1(), "rule__UseDefinition__AltTextAssignment_4_0_2_1");
					put(grammarAccess.getUseDefinitionAccess().getAddsAssignment_4_1_1(), "rule__UseDefinition__AddsAssignment_4_1_1");
					put(grammarAccess.getUseDefinitionAccess().getAddsAssignment_4_1_2_1(), "rule__UseDefinition__AddsAssignment_4_1_2_1");
					put(grammarAccess.getUseDefinitionAccess().getDelsAssignment_4_2_1(), "rule__UseDefinition__DelsAssignment_4_2_1");
					put(grammarAccess.getUseDefinitionAccess().getDelsAssignment_4_2_2_1(), "rule__UseDefinition__DelsAssignment_4_2_2_1");
					put(grammarAccess.getUseDefinitionAccess().getTextAssignment_4_3_1(), "rule__UseDefinition__TextAssignment_4_3_1");
					put(grammarAccess.getUseDefinitionAccess().getFollowSceneAssignment_4_4_1(), "rule__UseDefinition__FollowSceneAssignment_4_4_1");
					put(grammarAccess.getSceneDefinitionAccess().getNameAssignment_1(), "rule__SceneDefinition__NameAssignment_1");
					put(grammarAccess.getSceneDefinitionAccess().getImgAssignment_3(), "rule__SceneDefinition__ImgAssignment_3");
					put(grammarAccess.getSceneDefinitionAccess().getItemsAssignment_4_0_1(), "rule__SceneDefinition__ItemsAssignment_4_0_1");
					put(grammarAccess.getItemPositionDefinitionAccess().getItemAssignment_1(), "rule__ItemPositionDefinition__ItemAssignment_1");
					put(grammarAccess.getItemPositionDefinitionAccess().getXposAssignment_2_2(), "rule__ItemPositionDefinition__XposAssignment_2_2");
					put(grammarAccess.getItemPositionDefinitionAccess().getYposAssignment_2_4(), "rule__ItemPositionDefinition__YposAssignment_2_4");
					put(grammarAccess.getStartDefinitionAccess().getStartLocAssignment_1_0_1(), "rule__StartDefinition__StartLocAssignment_1_0_1");
					put(grammarAccess.getStartDefinitionAccess().getStartItemsAssignment_1_1_1(), "rule__StartDefinition__StartItemsAssignment_1_1_1");
					put(grammarAccess.getStartDefinitionAccess().getStartItemsAssignment_1_1_2_1(), "rule__StartDefinition__StartItemsAssignment_1_1_2_1");
					put(grammarAccess.getAdventureAccess().getUnorderedGroup_1(), "rule__Adventure__UnorderedGroup_1");
					put(grammarAccess.getAdventureAccess().getUnorderedGroup_3(), "rule__Adventure__UnorderedGroup_3");
					put(grammarAccess.getItemDefinitionAccess().getUnorderedGroup_3(), "rule__ItemDefinition__UnorderedGroup_3");
					put(grammarAccess.getUseDefinitionAccess().getUnorderedGroup_4(), "rule__UseDefinition__UnorderedGroup_4");
					put(grammarAccess.getStartDefinitionAccess().getUnorderedGroup_1(), "rule__StartDefinition__UnorderedGroup_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.ac.uibk.greatAdventure.ui.contentassist.antlr.internal.InternalGreatAdventureParser typedParser = (at.ac.uibk.greatAdventure.ui.contentassist.antlr.internal.InternalGreatAdventureParser) parser;
			typedParser.entryRuleAdventure();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GreatAdventureGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GreatAdventureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
