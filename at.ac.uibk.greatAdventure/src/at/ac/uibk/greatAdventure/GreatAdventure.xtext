grammar at.ac.uibk.greatAdventure.GreatAdventure with org.eclipse.xtext.common.Terminals

generate greatAdventure "http://www.ac.at/uibk/greatAdventure/GreatAdventure"

/*
 * An adventure consists of a title, multiple items and scenes and a start definition.
 */
Adventure:
	title = AdventureTitle 
	((itemDef += ItemDefinition) | (sceneDef += SceneDefinition))*
	startDef = StartDefinition
	((itemDef += ItemDefinition) | (sceneDef += SceneDefinition))*
;

// the title of the adventure
AdventureTitle:
	name=STRING
;

/*
 * an item has a name, that is used reference the item
 * at another point and mandatory attribute that defines the displayed image.
 * other than that, using the item might cause the scene to change (add, remove items,...)
 * and it might start a dialog with the user.
 * If an item is picked up, it is added to the player's inventory.
 */
ItemDefinition:
	("A" | "An" | "Ms." | "Mrs." | "Mr.") name=STRING ":"
	( 
		( pickup ?= "- can be picked up")?
		&
		"- looks like" img=STRING
		&
		(uses+=UseDefinition)*
		&
		(dialog=DialogDefinition)?
	)
;

/*
 * when an item is used, some items can be added/removed from the scene.
 * Using an item can also cause a message dialog with the specified message to be displayed.
 * Items can also be used to advance the game to the next scene.
 * Some items might require other items to be used (e.g. cant open a locked door without a key)
 * None of these properties are mandatory, though.
 */
UseDefinition:
	"- you can" name=STRING "with"? ("it, which:" | "her, which:" | "him, which") 
	(
		("+ requires" reqs=[ItemDefinition] ("or says" altText=STRING)?)?
		&
		("+ adds" adds+=[ItemDefinition] ("," adds+=[ItemDefinition])*)?
		&
		("+ removes" dels+=[ItemDefinition] ("," dels+=[ItemDefinition])*)?
		&
		("+ says" text=STRING)?
		&
		("+ takes you to the" followScene=[SceneDefinition])?
	)
	
;

/*
 * "entry" rule to start a nested dialog
 */
DialogDefinition:
	"- talks with you:"
		talk = TalkDefinition
;

/*
 * The dialog starts with a message to be displayed.
 * Besides that, by invoking the dialog, some items can be added/removed or the scene can be changed.
 * It is also possible to define multiple possible answers.
 * If the dialog is not reset, the runtime will remember the progress of the dialog, even if some other
 * actions are performed in the meantime.
 */
TalkDefinition:
	("+ says" say=STRING)
	&
	("+ adds" adds+=[ItemDefinition] ("," adds+=[ItemDefinition])*)?
	&
	("+ removes" dels+=[ItemDefinition] ("," dels+=[ItemDefinition])*)?
	&
	("+ takes you to the" followScene=[SceneDefinition])?
	&
	(((answers += AnswerDefinition)+ "+ no more answers") | "+ you do not answer")	
	&
	(reset ?= "+ forgets about conversation")?
;

/*
 * the answer to statement starts a new nesting level
 */
AnswerDefinition:
	"+ you say" answer=STRING ":"
		talk=TalkDefinitionMinus
;

/*
 * basically the same as the TalkDefinition, only that the prefix is changed from '+' to '-'.
 * this is done to obtain a more readable dialog representation, as the nesting level of a dialog can get
 * arbitrarily high.
 */
TalkDefinitionMinus:
	("- says" say=STRING)
	&
	("- adds" adds+=[ItemDefinition] ("," adds+=[ItemDefinition])*)?
	&
	("- removes" dels+=[ItemDefinition] ("," dels+=[ItemDefinition])*)?
	&
	("- takes you to the" followScene=[SceneDefinition])?
	&
	((answers += AnswerDefinitionMinus)+ "- no more answers" | "- you do not answer")
	&
	(reset ?= "- forgets about conversation")?
;

/*
 * recursive call to the original TalkDefinition causes the prefix to alternate between '+' and '-'
 */
AnswerDefinitionMinus:
	"- you say" answer=STRING ":"
		talk=TalkDefinition
;

/*
 * The scene is referenced by its name. To display the scene, a background image is necessary.
 * The definition also allows the game designer to place multiple items on the scene
 */
SceneDefinition:
	"The" name=STRING "looks like" img=STRING 
	(("and in it are:" items += ItemPositionDefinition+) | ".")
	
;

/*
 * Used to define which item should be put at which position in the scene.
 * (If no position is specified, the item will be put at a random position by the generator.)
 */
ItemPositionDefinition:
	"- a" item=[ItemDefinition] ("at" "(" xpos=INT "," ypos=INT ")")?
;

/*
 * The definition that defines, where the player is put at the beginning of the game
 * and the initial inventory items.
 */
StartDefinition:
	"In the beginning you:" 
	(
		"- are at the" startLoc=[SceneDefinition]
		&
		("- have" startItems+=[ItemDefinition] ("," startItems+=[ItemDefinition])*)?
	) 
;




